{"name":"Gimbal","tagline":"An HTTP testing system","body":"## Introduction\r\nGimbal is designed for testing HTTP APIs (REST or otherwise) and web sites. It allows the developer to describe requests and the responses those requests are expected to generate using a simple JSON or YAML document. Since Gimbal ships as a single, compiled binary it is easy to run in a variety of cases, including during a CI build process. It can also be scheduled using `cron` or similar.\r\n\r\n## Example Test Spec\r\nBelow is an extremely simple (trivially so) test suite for use with Gimbal. If you'd like to see a more complete example, check out [httpbin.json](https://github.com/Datamaglia/gimbal/blob/master/examples/httpbin.json), which tests a number of the [httpbin](http://httpbin.org/) endpoints. For now, let's take a quick look at the simple example.\r\n\r\nA Gimbal test suite is defined using a JSON file (YAML and other formats will be supported soon). The configuration is called a \"spec\". Specs are recursive, they can contain other specs. Configuration options contained in the parent are pushed down into the children. This forms a kind of tree, of which only the leaf nodes will actually result in HTTP requests.\r\n\r\nEach spec can describe an HTTP request and the response that is expected back. There are also some additional parameters, like how many times a request should be attempted before giving up. A request can be minimally specified by a `host` (which will result in a request for the URI `/`). The host will be inherited by child specs, which means you can define it just once on the parent and then specify URIs on the children.\r\n\r\n```{json}\r\n{\r\n    \"host\": \"gimbal.datamaglia.com\",\r\n    \"maxAttempts\": 1,\r\n    \"name\": \"Simple Tests\",\r\n    \"specs\": [\r\n        {\r\n            \"name\": \"root\",\r\n            \"responseHeaders\": {\r\n                \"Content-Type\": [\r\n                    \"text/html; charset=utf-8\"\r\n                ]\r\n            },\r\n            \"statusCode\": 200,\r\n            \"uri\": \"/\"\r\n        },\r\n        {\r\n            \"name\": \"404\",\r\n            \"responseHeaders\": {\r\n                \"Content-Type\": [\r\n                    \"text/html; charset=utf-8\"\r\n                ]\r\n            },\r\n            \"statusCode\": 404,\r\n            \"uri\": \"/404\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nA couple things to point out. First, notice that the header value is a list. This is in case there are multiple instance of a given header. All values are included in a single key (to make it valid JSON). Next, and probably self-explanatory, the `statusCode` key asserts which status code we expect back from the request.\r\n\r\n## Building\r\nRight now Gimbal is under heavy development and there aren't any releases. However, you can try it out by cloning the repository (see the link the left) and building it yourself. First, you'll need a functioning Go toolchain. There are [instructions](http://golang.org/doc/install) on the Go web site. The [Go article](http://howistart.org/posts/go/1) at \"How I Start\" is also an excellent read if you want to become more familiar with how Go development \"works\".\r\n\r\nOnce you've got that set up, you can run `go get github.com/datamaglia/gimbal` to grab the repo (or fork it and change the GitHub path to your fork). Switch to the source directory and run `go get && go build` and you'll have a binary in no time. Then you can run one of the examples. Try `./gimbal -f examples/httpbin.json`.\r\n\r\n## Specification\r\n\r\nThe following is a list of valid spec configuration parameters. Some of these have not yet been implemented.\r\n\r\n### name\r\n\r\nString. A descriptive name for the spec. Not used internally but will be logged\r\nin some cases for debugging and on failures. Parent names will be prepended, so\r\nif a spec named A has a child spec named B when the child spec is run its name\r\nwill appear as \"A :: B\". Default is \"\".\r\n\r\n### concurrentRequests\r\n\r\nInteger. The maximum number of concurrent requests that will be made. If this is set to\r\n1, requests will be run in serial. Default is 1.\r\n\r\n### outputLevel\r\n\r\nString. The type of messages that should be included in the output. One of\r\n\"success\", \"warning\", and \"failure\". Levels include subsequent levels. Default\r\nis \"success\".\r\n\r\n### maxAttempts\r\n\r\nInteger. The maximum number of times to attempt a request before it is declared\r\na failure. Default is 10.\r\n\r\n### timeElapsedDelta\r\n\r\nFloat. If the time a request takes is greater than `maxTimeElapsed`, but by less\r\nthan this amount, the result will be a warning, not a failure. This allows for\r\nsome \"wiggle room\". Default is 0.0.\r\n\r\n### host\r\n\r\nString. The host to contact, such as `httpbin.org`.\r\n\r\n### port\r\n\r\nInteger. The port on which to contact the host. Default is 80 when `SSL` is\r\nfalse and 443 when `SSL` is true.\r\n\r\n### ssl\r\n\r\nBoolean. Whether to use SSL for the request. Default is false.\r\n\r\n### method\r\n\r\nString. The HTTP verb to use for the request. Default is \"GET\".\r\n\r\n### statusCode\r\n\r\nInteger. The expected status code of the response. Default is 200.\r\n\r\n### maxTimeElapsed\r\n\r\nFloat. The maximum time the request can take and still be considered a success,\r\nin seconds. Default is 10.0.\r\n\r\n### requestHeaders\r\n\r\nObject. Mapping of header names to lists of header values that will be included\r\nin the request. Default is `{}`.\r\n\r\n### responseHeaders\r\n\r\nObject. Mapping of header names to lists of header values that are expected to\r\nbe included in the response. Unless `exactResponseHeaders` is true, the response\r\ncan contain additional headers, so this represents a minimum. Default is `{}`.\r\n\r\n### exactResponseHeaders\r\n\r\nBoolean. If true, the `responseHeaders` value will be treated as an exact\r\nenumeration of headers and values, if the response includes additional headers\r\nthe spec will fail. Default is false.\r\n\r\n### uri\r\n\r\nString. The URI to request from the host. Default is \"/\".\r\n\r\n### specs\r\n\r\nList. A recursive list of specs to run. Each of these will inherit properties\r\nfrom the parent as necessary. If this is set, then the spec that contains the\r\nlist will not run on its own. In other words, if you think about the\r\nconfiguration as a tree, only leaf nodes actually cause a test to be run.\r\nDefault is [].\r\n\r\n### requestData\r\n\r\nString. The raw data to include with the request. Default is \"\".\r\n\r\n### responseData\r\n\r\nString. The raw data that should be included with the response. If set to the\r\nempty string, no check is performed. Default is \"\".\r\n\r\n### vars (not yet implemented)\r\n\r\nObject. A map of variable assignments that can be used in the given spec and all\r\nits children. The keys must be strings. For now, the values must be strings or\r\nnumbers. Eventually lists will be supported and a `forEach` option will be added\r\nto run a given spec once for each value in the list. Default is `{}`.\r\n\r\n## Why \"Gimbal\"\r\n[Gimbals](https://en.wikipedia.org/wiki/Gimbal) help sailors, photographers, astronauts, and others keep their tools properly aligned. Gimbal helps developers keep their production systems aligned with their specifications.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}