{"name":"Gimbal","tagline":"An HTTP testing system","body":"### Introduction\r\nGimbal is designed for testing HTTP APIs (REST or otherwise) and web sites. It allows the developer to describe requests and the responses those requests are expected to generate using a simple JSON or YAML document. Since Gimbal ships as a single, compiled binary it is easy to run in a variety of cases, including during a CI build process. It can also be scheduled using `cron` or similar.\r\n\r\n### Example Test Suite\r\nBelow is an extremely simple (trivially so) test suite for use with Gimbal. If you'd like to see a more complete example, check out [httpbin.json](https://github.com/Datamaglia/gimbal/blob/master/examples/httpbin.json), which tests a number of the [httpbin](http://httpbin.org/) endpoints. For now, let's take a quick look at the simple example.\r\n\r\nA Gimbal test suite is defined using a JSON file (YAML and other formats will be supported soon). There is one required key, `specs`, which hold a list of test specs to be run. Each spec has two required bits: the request, which defines the request to send, and the response, which defines assertions about the response that comes back from the server.\r\n\r\nThere are two ways to define a request. The first example below uses the `url` key, which defines an entire URL string, including the protocol, URI, and (optionally) the port. The first test attempts to hit a server that doesn't exist, this is so we can see a failure when it runs. The second spec defines the pieces of the URL individually. The reason for this second option is that any of these can be defined once for the whole file, and the global values will be copied into any spec that doesn't have them. This cuts down on the required typing and simplifies updates.\r\n\r\n```json\r\n{\r\n    \"specs\": [{\r\n        \"request\": {\r\n            \"url\": \"http://fakeandnonexistentdomain.com\"\r\n        },\r\n        \"response\": {\r\n            \"statusCode\": 200\r\n        }\r\n    },{\r\n        \"request\": {\r\n            \"host\": \"gimbal.datamaglia.com\",\r\n            \"uri\": \"/\",\r\n            \"method\": \"GET\"\r\n        },\r\n        \"response\": {\r\n            \"statusCode\": 200,\r\n            \"headers\": {\r\n                \"Content-Type\": [\"text/html; charset=utf-8\"]\r\n            }\r\n        }\r\n    }]\r\n}\r\n```\r\n\r\nA couple things to point out. First, notice that the header value is a list. This is in case there are multiples, all values are included in a single key (to make it valid JSON). Next, and probably self-explanatory, the `statusCode` key asserts which status code we expect back from the request.\r\n\r\n### Building\r\nRight now Gimbal is under heavy development and there aren't any releases. However, you can try it out by cloning the repository (see the link the left) and building it yourself. First, you'll need a functioning Go toolchain. There are [instructions](http://golang.org/doc/install) on the Go web site. The [Go article](http://howistart.org/posts/go/1) at \"How I Start\" is also an excellent read if you want to become more familiar with how Go development \"works\".\r\n\r\nOnce you've got that set up, you can run `go get github.com/datamaglia/gimbal` to grab the repo (or fork it and change the GitHub path to your fork). Switch to the source directory and run `go get && go build` and you'll have a binary in no time. Then you can run one of the examples. Try `./gimbal -f examples/httpbin.json`.\r\n\r\n### Why \"Gimbal\"\r\n[Gimbals](https://en.wikipedia.org/wiki/Gimbal) help sailors, photographers, astronauts, and others keep their tools properly aligned. Gimbal helps developers keep their production systems aligned with their specifications.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}